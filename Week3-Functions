// Week 2 - Functions

// In the following exercises, you will need to place your code or answer underneath each
// exercise prompt.

// First try answering these without using references or looking up any information.
// Then, check your answer by using references and/or running your code.
// You can run your JS code using the Chrome or Firefox Developer tools, or by using Node.js or using Replit.com 
// Feel free to update your answers if you got them wrong at first -- this exercise is for your own learning.
// But make sure you understand why the correct answer is right.

// Exercise 1. Write a function called prependToString, which accepts two strings.
// The function should return a new string with the second string prepended to the first string.
// Examples:
// prependToString('awesome', 'very') // --> 'veryawesome'
// prependToString('world', 'hello ') // --> 'hello world'
// prependToString('nothing', '') // --> 'nothing'

//pseudocode 
//function pretendToString
//input: two strs
//output: return new str with the second str prepended to first str

function prependToString(str1, str2) {
  let beginning = str1;
  let ending = str2
  if (beginning === '') {
    return str1; 
      if(ending === '') {
        return str2;
      }
    }
return ending + '' + beginning; 
}

console.log(prependToString('awesome', 'very')); // --> 'veryawesome'
console.log(prependToString('world', 'hello ')); // --> 'hello world'
console.log(prependToString('nothing', '')); // --> 'nothing'

// Exercise 2. Write a function called stringIncludes, which accepts two strings: the first string is a word and the second string is a single character.
// The function should return true if the first string includes the character, otherwise it should return false.

//pseudocode
//function stringIncludes
//input: str1 = word; str2 = char
//iterate through word
//use for loop
//if str[i] === char
//return true
//else return false 

function stringIncludes(word, char) {
  for(let i = 0; i < word.length; i++) {
    if(word[i] == char) {
      return true;
    } 
  } 
  return false; 
}

console.log(stringIncludes('awesome', 'e')); // --> true
console.log(stringIncludes('awesome', 'z')); // --> false


// IMPORTANT: Do not use the built in string.includes() function!
// Examples:
// stringIncludes('awesome', 'e'); // --> true
// stringIncludes('awesome', 'z'); // --> false

// Exercise 3. Write a function called stringLastIndexOf, which accepts two strings: the first is a word and the second is a single character.
// The function should return the last index at which the character exists or -1 if the character is not found.
// IMPORTANT: Do not use the built in "string".lastIndexOf() function!
// Examples:
// stringLastIndexOf('awesome', 'e'); // --> 6
// stringLastIndexOf('awesome', 'z'); // --> -1

//pseudocode 
//function stringLastIndexOf
//input: two strings(word, char)
//ouput: last index of the char that exists or -1 if char is not found

//iterate through word 
//for loop
//if word[i] === char
//return i 
//else -1

function stringLastIndexOf(word, char) {
  for(let i = word.length - 1; i > 0; i--) { //i=0
    if(word[i] === char) { //a != e
      return i;
    }
  }
  return -1;
}

console.log(stringLastIndexOf('awesome', 'e')); // --> 6
console.log(stringLastIndexOf('awesome', 'z')); // --> -1

// Exercise 4. Write a function called removeFromString, which accepts a string, a starting index (number) and a number of characters to remove.
// The function should return a new string with the characters removed.

//pseudocode
//function removeFromString
//input: string, starting index num, num of char to remove
//output: new str with char removed 
//splice method?

//originally was using slice method
//which only returned removed values
//deltes or grabs between 1-10
//doesn't delete

//however in order remove chars, we need to first convert string to arr
//and then use splice method to be able to return str with char removed 



function removeFromString(str, startingIndex, removedChar) {
  let newStr = str.split('');
  //printing everything you're removing
  newStr.splice(startingIndex, removedChar);
  return newStr.join('');
}

// function removeFromString(str, startingIndex, removedChar) {
//  for(let i = 0; i < str.length; i++) {
//    if(str[i] ==)
//  }
// }

console.log(removeFromString('Elie', 2, 2)); // --> 'El'
console.log(removeFromString('Elie', 0, 1)); // --> 'lie'
console.log(removeFromString('Hello School', 0, 6)); // --> 'School'
console.log(removeFromString('Hello School', 2, 4)); // --> 'HeSchool'
console.log(removeFromString('Hello School', 6, 400)); // --> 'Hello '


// Exercise 5. Write a function called indexOf, which accepts an array and a number.
// The function should return the first index at which the value exists or -1 if the value is not found.
// IMPORTANT: Do not use the built in array.indexOf() function!
// Examples:
// let arr = [5, 10, 15, 20];
// indexOf(arr, 20); // --> 3
// let arr2 = [1, 2, 3, 4, 5];
// indexOf(arr2, 2); // --> 1
// let arr3 = [1, 2];
// indexOf(arr3, 10); // --> -1

//pseudocode
//function indexOf
//input: arr, num
//output: first i at which the value exists or -1 if value not ofund

//iterate through arr
//for loop
//if arr[i] === num 
//return i 
//return -1

function indexOf(arr, str) {
  for(let i = 0; i < arr.length; i++) {
    if(arr[i] === str) {
      return i;
    }
  }
  return -1
}

let arr = [5, 10, 15, 20];
console.log(indexOf(arr, 20)); // --> 3
let arr2 = [1, 2, 3, 4, 5];
console.log(indexOf(arr2, 2)); // --> 1
let arr3 = [1, 2];
console.log(indexOf(arr3, 10)); // --> -1


// Exercise 6. Write a function called includes which accepts a collection, a value, and an optional starting index. The function should return true if the value exists in the collection when we search starting from the starting index. Otherwise, it should return false.
// The collection can be a string, an array, or an object. If the collection is a string or array, the third parameter is a starting index for where to search from. If the collection is an object, the function searches for the value among values in the object; since objects have no sort order, the third parameter is ignored.


//pseudocode
//function includes
//input: collection, value, optional starting index
//output: TRUE if the value exists in the collection when we search starting from the starting index
//COLLECTION CAN BE A STRING, AN ARR, OR OBJ
//IF COLLECTION STRING OR ARR = THIRD PARAM IS STARTING INDEX TO SEARCH FROM
//IF COLLECTION OBJ, THIRD PARAM IS IGNORED

//want to verify whether its str, arr or obj
//if Array.isArray(collection) || collection === []
//
//iterate through str with for loop
//initalization will be starting index
//if(collection[i] === value) {
//return true
//else false
//}




// function includes(collection, value, startingIndex) {
//   if(Array.isArray(collection) || collection === "") {
//     for(let i = startingIndex; i < collection.length; i++) { 
//       if(startingIndex === null) {
//         startingIndex = 0;
//       }
//     if(collection[i] === value) {
//       return true;
//     }
//   }
// }  
//    return false;
// }

function includes(collection, val, startIdx) {

  if (!Array.isArray(collection) && typeof collection !== 'string') {
    for (let key in collection) {
      if (val === collection[key]) {
        return true
      }
    }
    return false;
  }

  if (startIdx === undefined) {
    return collection.indexOf(val) > -1
  }

  return collection.slice(startIdx).indexOf(val) > -1
}

// Examples:
console.log(includes([1, 2, 3], 1)); // --> true
console.log(includes([1, 2, 3], 1, 2)); // --> false
console.log(includes([1, 2, 3], 6)); // --> false
console.log(includes({ 'a': 1, 'b': 2 }, 1)); // --> true
console.log(includes({ 'a': 1, 'b': 2 }, 'a')); // --> false
console.log(includes('abcd', 'b')); // --> true
console.log(includes('abcd', 'e')); // --> false
console.log(includes('abcd', 'a', 2)); // --> false